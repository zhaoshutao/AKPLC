<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.6">
  <GVL Name="Global_Variables" Id="{bcaa4f18-97b1-4818-bac8-1835e8da9e31}">
    <Declaration><![CDATA[//{attribute 'Tc2GvlVarNames'}
VAR_GLOBAL
(*IDControl Ready*)
	IDControlReady:BOOL;
(*RecipeDescription*)
RecipeSavedDate:STRING;
RecipeDescription:STRING;
(*key Command*)
	btn_Power:BOOL;
	btn_PowerOn: BOOL;
	btn_PowerOff: BOOL;
(*Reset*)
btn_Reset:BOOL;
(*Error Massage*)
	Error:BOOL;
	ErrorID:DINT;
	ErrorDescription:STRING;
(*加载配方参数*)
	LoadRecipeParameters:BOOL;
	loadParametersDone:BOOL;
(*设置光栅bias done *)	
	PositionBiasDone:BOOL;
(*Drive Status*)
	DriveStatus:DINT;//1:Drive Ready;2:Axis is in operation;0:Others
(*回程差*)
	HysteresisError:LREAL;
	HysteresisError_PhaseUpper:LREAL:=0.1;
	HysteresisError_PhaseLower:LREAL:=0.1;
(*光栅漂移误差阈值*)
	LEDriftErrorThreshold:LREAL:=0.001;
	LEDriftErrorThreshold_PhaseUpper:LREAL:=0.001;
	LEDriftErrorThreshold_PhaseLower:LREAL:=0.001;
(*Lag Distance threshold*)
	PosDiff_LeftTopLin: LREAL:=0.5;
	PosDiff_RightTopLin:LREAL:=0.5;
	PosDiff_LeftBottomLin:LREAL:=0.5;
	PosDiff_RightBottomLin:LREAL:=0.5;
	PosDiff_PhaseUpperLin:LREAL:=0.5;
	PosDiff_PhaseLowerLin:LREAL:=0.5;
(*UserMode Threshold*)
	Threshold_UserTopPos: LREAL:=0.5;
	Threshold_UserBottomPos: LREAL:=0.5;
	Threshold_UserLeftPos: LREAL:=0.5;
	Threshold_UserRightPos: LREAL:=0.5;
	Threshold_UserTopVelo: LREAL:=0.5;
	Threshold_UserBottomVelo: LREAL:=0.5;
	Threshold_UserLeftVelo: LREAL:=0.5;
	Threshold_UserRightVelo: LREAL:=0.5;
	//
	Range_UserTaperPos:LREAL:=4.01;
	Range_UserTaperVelo:LREAL:=1.01;
	//Diff_TaperLeftPos:LREAL:=0.01;
	//Diff_TaperLeftVelo:LREAL:=0.2;
	//Diff_TaperRightPos:LREAL:=0.05;
	//Diff_TaperRightVelo:LREAL:=0.5;
	//Taper_BeyondRangePositive:BOOL;
	//Diff_TaperTopPos:LREAL:=0.05;
	//Diff_TaperBottomPos:LREAL:=0.05;
	//Taper_BeyondRangeNegtive:BOOL;
(*BCGap Threshold*)
	Threshold_BCTopPos: LREAL:=0.5;
	Threshold_BCBottomPos: LREAL:=0.5;
	Threshold_BCLeftPos: LREAL:=0.5;
	Threshold_BCRightPos: LREAL:=0.5;
	Threshold_BCTopVelo: LREAL:=0.5;
	Threshold_BCBottomVelo: LREAL:=0.5;
	Threshold_BCLeftVelo: LREAL:=0.5;
	Threshold_BCRightVelo: LREAL:=0.5;
(*DebugMode Threshold*)
	Threshold_TopPos_Debug: LREAL:=4;
	Threshold_BottomPos_Debug: LREAL:=4;
	Threshold_LeftPos_Debug: LREAL:=4;
	Threshold_RightPos_Debug: LREAL:=4;
(*Taper Mode Threshold*)
	Range_TaperPos:LREAL:=5.01;
	Range_TaperVelo:LREAL:=1.01;
	Threshold_TaperLeftPos:LREAL:=0.01;
	Threshold_TaperLeftVelo:LREAL:=0.2;
	Threshold_TaperRightPos:LREAL:=0.05;
	Threshold_TaperRightVelo:LREAL:=0.5;
	Taper_BeyondRangePositive:BOOL;
	Threshold_TaperTopPos:LREAL:=0.05;
	Threshold_TaperBottomPos:LREAL:=0.05;
	Taper_BeyondRangeNegtive:BOOL;
(*SingleCarrierMode threshold*)
	Threshold_TopPos_SingleCarrier: LREAL:=2;
	Threshold_BottomPos_SingleCarrier: LREAL:=2;
	Threshold_LeftPos_SingleCarrier: LREAL:=2;
	Threshold_RightPos_SingleCarrier: LREAL:=2;
	Threshold_TopVelo_SingleCarrier: LREAL:=2;
	Threshold_BottomVelo_SingleCarrier: LREAL:=2;
	Threshold_LeftVelo_SingleCarrier: LREAL:=2;
	Threshold_RightVelo_SingleCarrier: LREAL:=2;
		(*Moving or notmoving*)
	moveDoneAllAxis: BOOL;
	moveStatusLeftTop: BOOL;
	moveStatusRightTop: BOOL;
	moveStatusLeftBottom: BOOL;
	moveStatusRightBottom: BOOL;
	moveStatusPhaseUpper: BOOL;
	moveStatusPhaseLower: BOOL;
	moveStatusAllAxis: BOOL;
	moveStatusAnyAxis: BOOL;
(*Compensation Value*)
	M_Compensation:ARRAY[1..18] OF Struct_M_Compensation
:=[
(Encoder:=0,	LeftTop:=0,	RightTop:=0,		LeftBottom:=0,	RightBottom:=0,	InRange:=FALSE),
(Encoder:=5.5,	LeftTop:=5.5,	RightTop:=5.5,	LeftBottom:=5.5,	RightBottom:=5.5,	InRange:=FALSE),
(Encoder:=6.0,	LeftTop:=6.0,	RightTop:=6.0,	LeftBottom:=6.0,	RightBottom:=6.0,	InRange:=FALSE),
(Encoder:=6.5,	LeftTop:=6.5,	RightTop:=6.5,	LeftBottom:=6.5,	RightBottom:=6.5,	InRange:=FALSE),
(Encoder:=7.5,	LeftTop:=7.5,	RightTop:=7.5,	LeftBottom:=7.5,	RightBottom:=7.5,	InRange:=FALSE),
(Encoder:=8.5,	LeftTop:=8.5,	RightTop:=8.5,	LeftBottom:=8.5,	RightBottom:=8.5,	InRange:=FALSE),
(Encoder:=9.5,	LeftTop:=9.5,	RightTop:=9.5,	LeftBottom:=9.5,	RightBottom:=9.5,	InRange:=FALSE),
(Encoder:=10.5,	LeftTop:=10.5,	RightTop:=10.5,	LeftBottom:=10.5,	RightBottom:=10.5,		InRange:=FALSE),
(Encoder:=11.5,	LeftTop:=11.5,	RightTop:=11.5,	LeftBottom:=11.5,	RightBottom:=11.5,		InRange:=FALSE),
(Encoder:=30.0,	LeftTop:=30.0,	RightTop:=30.0,	LeftBottom:=30.0,	RightBottom:=30.0,		InRange:=FALSE),
(Encoder:=100.0,	LeftTop:=100.0,	RightTop:=100.0,	LeftBottom:=100.0,	RightBottom:=100.0,		InRange:=FALSE),
(Encoder:=110.0,	LeftTop:=110.0,	RightTop:=110.0,	LeftBottom:=110.0,	RightBottom:=110.0,		InRange:=FALSE),
(Encoder:=120.0,	LeftTop:=120.0,	RightTop:=120.0,	LeftBottom:=120.0,	RightBottom:=120.0,		InRange:=FALSE),
(Encoder:=130.0,	LeftTop:=130.0,	RightTop:=130.0,	LeftBottom:=130.0,	RightBottom:=130.0,		InRange:=FALSE),
(Encoder:=140.0,	LeftTop:=140.0,	RightTop:=140.0,	LeftBottom:=140.0,	RightBottom:=140.0,		InRange:=FALSE),
(Encoder:=150.0,	LeftTop:=150.0,	RightTop:=150.0,	LeftBottom:=150.0,	RightBottom:=150.0,		InRange:=FALSE),
(Encoder:=160.0,	LeftTop:=160.0,	RightTop:=160.0,	LeftBottom:=160.0,	RightBottom:=160.0,		InRange:=FALSE),
(Encoder:=3000.001,	LeftTop:=3000.001,	RightTop:=3000.001,		LeftBottom:=3000.001,	RightBottom:=3000.001,	InRange:=FALSE)];

(*simulation OR NOT*)
	simulation:BOOL;
(*USELinearEncoeder*)
	USELinearEncoder:BOOL:=TRUE;
(*restartTwinCAT*)
	m_restartTC:BOOL;
(*Plc_EmergencyStop *)
	Plc_EmergencyStop  AT %Q*:BOOL:=TRUE;
(*硬急停*)
	Hardware_EmergencyStop :BOOL:=TRUE;
(*LED*)
	Led_Run  AT %Q*:BOOL;
	Led_Error  AT %Q*:BOOL;
(*LimitSwitch*)
	LS_LeftTop_Far  :BOOL;
	LS_LeftTop_Near  :BOOL;
	LS_RightTop_Far  :BOOL;
	LS_RightTop_Near  :BOOL;
	LS_LeftBottom_Far  :BOOL;
	LS_LeftBottom_Near  :BOOL;
	LS_RightBottom_Far :BOOL;
	LS_RightBottom_Near  :BOOL;
	Unreach_LS_Far:BOOL;
	Unreach_LS_Near:BOOL;
	LS_PhaseUpper_Entrance  :BOOL;
	LS_PhaseUpper_Exit  :BOOL;
	LS_PhaseLower_Entrance :BOOL;
	LS_PhaseLower_Exit  :BOOL;
(*kill switch*)
	KS_LeftTop_Far_Contact1:BOOL;
	KS_LeftTop_Far_Contact2:BOOL;
	KS_RightTop_Far_Contact1:BOOL;
	KS_RightTop_Far_Contact2:BOOL;
	KS_LeftBottom_Far_Contact1:BOOL;
	KS_LeftBottom_Far_Contact2:BOOL;
	KS_RightBottom_Far_Contact1:BOOL;
	KS_RightBottom_Far_Contact2:BOOL;
	KS_PhaseUpper_Exit_Contact1:BOOL;
	KS_PhaseUpper_Exit_Contact2:BOOL;
	KS_PhaseLower_Exit_Contact1:BOOL;
	KS_PhaseLower_Exit_Contact2:BOOL;
	
	KS_LeftTop_Near_Contact1:BOOL;
	KS_LeftTop_Near_Contact2:BOOL;
	KS_RightTop_Near_Contact1:BOOL;
	KS_RightTop_Near_Contact2:BOOL;
	KS_LeftBottom_Near_Contact1:BOOL;
	KS_LeftBottom_Near_Contact2:BOOL;
	KS_RightBottom_Near_Contact1:BOOL;
	KS_RightBottom_Near_Contact2:BOOL;
	KS_PhaseUpper_Entrance_Contact1:BOOL;
	KS_PhaseUpper_Entrance_Contact2:BOOL;
	KS_PhaseLower_Entrance_Contact1:BOOL;
	KS_PhaseLower_Entrance_Contact2:BOOL;
(*E-STOP*)
	KS_CabinetEmergency_contact1:BOOL;
	KS_CabinetEmergency_contact2:BOOL;
	KS_handEmergency1_Contact1:BOOL;
	KS_handEmergency1_Contact2:BOOL;
	KS_handEmergency2_Contact1:BOOL;
	KS_handEmergency2_Contact2:BOOL;
	KS_softEmergency2_Contact:BOOL;
(*AX5805_ErrorAsk*)	
	AX5805_ErrorAsk:BOOL;
(*aixs_ref*)
	LeftTopLin: axis_ref;
	RightTopLin:axis_ref;
	LeftBottomLin:axis_ref;
	RightBottomLin:axis_ref;
	PhaseUpperLin:axis_ref;
	PhaseLowerLin:axis_ref;
(*axis Position*)
	Pos_LeftTopLin: LREAL;
	Pos_RightTopLin:LREAL;
	Pos_LeftBottomLin:LREAL;
	Pos_RightBottomLin:LREAL;
	Pos_PhaseUpperLin:LREAL;
	Pos_PhaseLowerLin:LREAL;
(*axis Velocity*)
	Velo_LeftTopLin: LREAL;
	Velo_RightTopLin:LREAL;
	Velo_LeftBottomLin:LREAL;
	Velo_RightBottomLin:LREAL;
	Velo_PhaseUpperLin:LREAL;
	Velo_PhaseLowerLin:LREAL;
(*Lag Distance*)
	PosDiff_LeftTopLin_actual: LREAL;
	PosDiff_RightTopLin_actual:LREAL;
	PosDiff_LeftBottomLin_actual:LREAL;
	PosDiff_RightBottomLin_actual:LREAL;
	PosDiff_PhaseUpperLin_actual:LREAL;
	PosDiff_PhaseLowerLin_actual:LREAL;
(********************Gap Mode*************************)
(**)
	GapPositionActual:LREAL;
	GapVelocityActual:LREAL;
	GapMoveIndicator:DINT:=0;
	(*1=OPEN;0=NOTMOVE;-1=CLOSE*)
(******************Taper Mode**************************)
(*Taper*)
	TaperPositionActual:LREAL;
	TaperVelocityActual:LREAL;
	TaperMoveIndicator:DINT:=0;
	(*1=OPEN;0=NOTMOVE;-1=CLOSE*)
(*****************singleCarrier Mode*******************************)
(**)
	TopPositionActual:LREAL;
	TopVelocityActual:LREAL;
	BottomPositionActual:LREAL;
	BottomVelocityActual:LREAL;
	TopMoveIndicator:DINT:=0;
	(*1=OPEN;0=NOTMOVE;-1=CLOSE*)
	BottomMoveIndicator:DINT:=0;
	(*1=OPEN;0=NOTMOVE;-1=CLOSE*)
(******************DebugMode & BCGapMode*****************************)
	LeftTopLinMoveIndicator:DINT:=0;
	(*1=OPEN;0=NOTMOVE;-1=CLOSE*)
	LeftBottomLinMoveIndicator:DINT:=0;
	(*1=OPEN;0=NOTMOVE;-1=CLOSE*)
	RightTopLinMoveIndicator:DINT:=0;
	(*1=OPEN;0=NOTMOVE;-1=CLOSE*)
	RightBottomLinMoveIndicator:DINT:=0;
	(*1=OPEN;0=NOTMOVE;-1=CLOSE*)
(******************Gap&SingleCarrier***********************************)
	Diff_TopPos_actual: LREAL;
	Diff_BottomPos_actual: LREAL;
	Diff_LeftPos_actual: LREAL;
	Diff_RightPos_actual: LREAL;
	Diff_TopVelo_actual:  LREAL;
	Diff_BottomVelo_actual: LREAL;
	Diff_LeftVelo_actual: LREAL;
	Diff_RightVelo_actual:  LREAL;

(******************BCGap Mode***********************************)
	Diff_BCTopPos_actual: LREAL;
	Diff_BCBottomPos_actual: LREAL;
	Diff_BCLeftPos_actual: LREAL;
	Diff_BCRightPos_actual: LREAL;
	Diff_BCTopVelo_actual:  LREAL;
	Diff_BCBottomVelo_actual: LREAL;
	Diff_BCLeftVelo_actual: LREAL;
	Diff_BCRightVelo_actual:  LREAL;
(******************UserMode*********************)
	Diff_UserTopPos_actual: LREAL;
	Diff_UserBottomPos_actual: LREAL;
	Diff_UserLeftPos_actual: LREAL;
	Diff_UserRightPos_actual: LREAL;
	Diff_UserTopVelo_actual:  LREAL;
	Diff_UserBottomVelo_actual: LREAL;
	Diff_UserLeftVelo_actual: LREAL;
	Diff_UserRightVelo_actual:  LREAL;
	TaperFunctionSolidOn:BOOL;//该ID是否有taper需求，taper总开关，只在参数表生效
	TaperOrNot:BOOL;
	UserTaperPositionActual:LREAL;
	UserTaperVelocityActual:LREAL;
(***********************Power status and couple statatus***********************)
	st_Power:BOOL;
	st_Couple:DINT;
(************************FB***********************)
	FB_Power:FB_Power;
	FB_PlcEmergencyStop: FB_PlcEmergencyStop;
	FB_CheckCoupleStatus:FB_CheckCoupleStatus;
	FB_Move:FB_Move;
	FB_Stop:FB_Stop;
	FB_DecoupleAxis:FB_DecoupleAxis;
	FB_CoupleAxis: FB_CoupleAxis;
	FB_Move_PhaseUpper:FB_Move;
	FB_Stop_PhaseUpper:FB_Stop;
	FB_Move_PhaseLower:FB_Move;
	FB_Stop_PhaseLower:FB_Stop;
(********************²¹³¥GapÄ£Ê½£¬µ¥Öá²¹³¥Êý¾Ý************************)
	(*ÊÇ·ñ²¹³¥*)
	USE_SingleAxis_Compensation:BOOL:=TRUE;
	Mdut:ARRAY[1..2] OF DUT:=
	[(Encoder:=2.0,	LeftTop:=2.3000),
	(Encoder:=2.0,	LeftTop:=2.3000)];


	M_CompensationNumber:INT;
	M_DisplayNumber:INT;
	(*Conpensation Position Target*)
	LeftTopLinPositionNew:LREAL;
	LeftBottomLinPositionNew:LREAL;
	RightTopLinPositionNew:LREAL;
	RightBottomLinPositionNew:LREAL;
	(*考虑到回程差后，运动到临时位置*)
	LeftTopLinPositionNew_temporary :LREAL;
	LeftBottomLinPositionNew_temporary:LREAL;
	RightTopLinPositionNew_temporary:LREAL;
	RightBottomLinPositionNew_temporary:LREAL;
	(*Display Position*)
	LeftTopLinPositionDisplay:LREAL;
	LeftBottomLinPositionDisplay:LREAL;
	RightTopLinPositionDisplay:LREAL;
	RightBottomLinPositionDisplay:LREAL;
	(*Display Velocity*)
	LeftTopLinVelocityDisplay:LREAL;
	LeftBottomLinVelocityDisplay:LREAL;
	RightTopLinVelocityDisplay:LREAL;
	RightBottomLinVelocityDisplay:LREAL;
	(*temperature sensors*)
	thermocouple AT %I*:ARRAY[1..12]OF  DINT;
	shieldPt100  AT %I*:ARRAY[1..12]OF INT;
	thermocouple_Celsius:ARRAY[1..12]OF  LREAL;
	shieldPt100_Celsius  :ARRAY[1..12]OF LREAL;
	huoer_Celsius AT %I* :ARRAY[1..3]OF INT;
	(**)
	lakeshorePt100  AT %I*:ARRAY[1..12]OF INT;(*16*×èÖµ*)
	lakeshorePt100_Resistance :ARRAY[1..12]OF LREAL;(*ÉãÊÏÎÂ¶È*)
	lakeshorePt100_Celsius  :ARRAY[1..12]OF LREAL;(*ÉãÊÏÎÂ¶È*)
	temperatureCompensationValue:LREAL:=6;
	testSensors  AT %I*:ARRAY[1..4]OF INT;

(******RS232************)
	RxBufferEL			: ComBuffer;	(* Receive data buffer; used with all receive function blocks *)
	TxBufferEL			: ComBuffer;	(* Transmit data buffer; used with all receive function blocks *)

	
END_VAR

]]></Declaration>
  </GVL>
</TcPlcObject>